# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
paddle_width=30
speed=10
# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos=[WIDTH/2,HEIGHT/2]
    ball_vel=[random.randrange(120,240)*direction/100,random.randrange(100,180)/100]
    

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1=0
    score2=0
    paddle1_vel=0
    paddle2_vel=0
    paddle1_pos=HEIGHT/2
    paddle2_pos=HEIGHT/2
    if score1>score2:
        spawn_ball(1)
    else:
        spawn_ball(-1)   

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    if ball_pos[1]<BALL_RADIUS:
        ball_vel[1]-=2*(ball_vel[1]+0.05)
    elif ball_pos[1]>HEIGHT-BALL_RADIUS:
        ball_vel[1]-=2*(ball_vel[1]+0.05)  
    if ball_pos[0]-BALL_RADIUS<PAD_WIDTH and (ball_pos[1]<paddle1_pos-paddle_width or ball_pos[1]>paddle1_pos+paddle_width):
        spawn_ball(1)
        score2+=1
    elif ball_pos[0]-BALL_RADIUS<PAD_WIDTH and (ball_pos[1]>paddle1_pos-paddle_width or ball_pos[1]<paddle1_pos+paddle_width):
        ball_vel[0]-=2*(ball_vel[0]*1.1)
    if ball_pos[0]+BALL_RADIUS>WIDTH - PAD_WIDTH and (ball_pos[1]<paddle2_pos-paddle_width or ball_pos[1]>paddle2_pos+paddle_width):
        spawn_ball(-1)
        score1+=1
    elif ball_pos[0]+BALL_RADIUS>WIDTH - PAD_WIDTH and (ball_pos[1]>paddle2_pos-paddle_width or ball_pos[1]<paddle2_pos+paddle_width):
        ball_vel[0]-=2*(ball_vel[0]*1.1) 
        
    ball_pos[0]+=ball_vel[0]
    ball_pos[1]+=ball_vel[1]         
        
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, 'Orange', 'Orange')        
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos>=paddle_width and paddle1_pos<=HEIGHT-paddle_width:
        paddle1_pos+=paddle1_vel
    elif paddle1_pos<paddle_width:
        paddle1_pos=paddle_width
    else:
        paddle1_pos=HEIGHT-paddle_width
    if paddle2_pos>=paddle_width and paddle2_pos<=HEIGHT-paddle_width:
        paddle2_pos+=paddle2_vel
    elif paddle2_pos<paddle_width:
        paddle2_pos=paddle_width
    else:
        paddle2_pos=HEIGHT-paddle_width
        
    # draw paddles
    canvas.draw_line([PAD_WIDTH/2, paddle1_pos-paddle_width],[PAD_WIDTH/2, paddle1_pos+paddle_width], PAD_WIDTH, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH/2, paddle2_pos-paddle_width],[WIDTH - PAD_WIDTH/2, paddle2_pos+paddle_width], PAD_WIDTH, "White")

    # determine whether paddle and ball collide    
    
    # draw scores
    canvas.draw_text(str(score1),[270,100],40,"white")
    canvas.draw_text(str(score2),[310,100],40,"white")
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel-=speed
    elif key==simplegui.KEY_MAP["down"]:
        paddle2_vel+=speed
    if key ==simplegui.KEY_MAP["w"] :
        paddle1_vel-=speed
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel+=speed  
    
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel+=speed
    elif key==simplegui.KEY_MAP["down"]:
        paddle2_vel-=speed
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel+=speed
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel-=speed


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_draw_handler(draw)
frame.add_button("new game",new_game)


# start frame
new_game()
frame.start()
